多态(polymorphism)，封装，继承是面向对象思想的三大特征。
多态性的定义：同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。
1. 编译时的多态:编译时的多态是通过重载来实现的，根据传递的参数、返回的类型等信息决定实现何种操作。
2. 运行时的多态：运行时的多态是指直到系统运行时，才根据实际情况决定实现何种操作，C++中，运行时的多态是通过虚成员实现。

虚函数是通过虚函数表实现的。
如果一个类中含有虚函数，则系统会为这个类分配一个指针成员指向一张虚函数表，表中每一项指向一个虚函数的地址，实现上就是一个函数指针的数组。
虚函数表既有继承性，又有多态性。每个派生类的虚函数表继承了它各个基类的虚函数表，如果派生类覆盖了该项对应的虚函数，则派生类的虚函数表指向重写后的虚函数，没有重载的话，则沿用基类的。

多继承中的构造函数顺序如下：
1. 任何虚拟基类的构造函数按照他们被继承的顺序构造。会最先构造最早的基类，而且不会重复调用它。
2. 任何非虚拟基类的构造函数按照他们被构造的顺序构造。
3. 任何成员对象的构造按照他们声明的顺序调用。
4. 类自身的构造函数。

纯虚函数在基类中是没有定义的，必须在子类中实现。
方便使用多态。基类本身生成对象是不合情理的。
含有纯虚函数的类就是抽象类，不能实例化，只能在子类中进行实例。
